module Bro where

import Data.List
--___________________________________
null' [] = True
null' _ = False
--___________________________________
take' _ [] = []
take' 0 _ = []
take' n (x:xs) = x : take' (n-1) xs
--___________________________________
drop' _ [] = []
drop' 0 xs = xs
drop' n (s:xs) = drop' (n-1) xs
--___________________________________
fst' (x,y) = x
--___________________________________
snd' (x,y) = y
--___________________________________
delete' _ [] = []
delete' y (x:xs)
  | y == x = xs
  | y /= x = [x] ++ delete' y (xs)
--___________________________________
zip' [] [] = []
zip' [] _ = []
zip' _ [] = []
zip' (x:xs) (y:ys) = [(x,y)] ++ zip' xs ys
--___________________________________
nth' (x:xs) 0 = x
nth' (x:xs) y = nth' xs (y-1)
--___________________________________
sort' [] = []
sort' [x] = [x]
sort' (x:xs)
  | [x] > [xa] = [xa] ++ [x] ++ sort' xs
  | [x] < [xa] = [x] ++ [xa] ++ sort' xs
--[x] < xs = [x] ++ sort' xs
-- [4,4,1,6,8]

-- [1,4,7,6,1,9]
-- sort' [10,5,9,23,2]
-- [x] = [10]
--[x] > xs = xs ++  [x]
-- sort' [4,10,54,8] =
-- [4] ++ sort' [10,54,8]
-- [4] ++ [10] sort' [54,8]
-- [4,10] ++ sort' [8] ++ [54]
-- [4,10,8,54]
-- sort' [6,8,21,4,10]
-- 6 sort' [8,21,4,10]
-- [6] ++ [8] ++ sort' [21,4,10]
-- [6,8] ++ sort' [4,10] ++ [21]
-- [6,8] ++ [4] sort' [10] ++ [21]
-- = [6,8,4,10,21]
--___________________________________
elem' _ [] = False
elem' y (x:xs)
  | y == x = True
  | y /= x = elem' y xs
  | otherwise = False
--___________________________________
notElem' _ [] = True
notElem' y (x:xs)
  | y == x = False
  | y /= x = notElem' y xs
  | otherwise = True
--___________________________________
head' (x:xs) = x
--___________________________________
length' [] = 0
length' (x:xs) = 1 + length' xs
--___________________________________
reverse' [] = []
reverse' [x] = [x]
reverse' (x:xs) = reverse' xs ++ [x]
--___________________________________
last' [x] = x
last' (x:xs) = last' (xs)
--___________________________________
tail'(x:xs) = xs
--___________________________________
init' [x] = []
init' (x:xs) = x : init' xs
--___________________________________
max' x y
  | x == y = x
  | x > y = x
  | x < y = y
--___________________________________
min' x y
  | x == y = x
  | x > y = y
  | x < y = x
--___________________________________
concat' [[]] = []
concat' [(a:as)] = (a:as)
--___________________________________
intersperse' _ [] = []
intersperse' _ [x] = [x]
intersperse' a (x:xs) = [x] ++ [a] ++ intersperse' a xs
--___________________________________
intercalate' _ [(x:xs)] = (x:xs)
--___________________________________
and' [] = True
and' (x:xs)
  | x == False = False
  | x /= False = and' xs
--___________________________________
or' [] = False
or' (x:xs)
  | x == True = True
  | x /= True = or' xs
--___________________________________
zip3' [] [] [] = []
zip3' _ [] [] = []
zip3' [] _ [] = []
zip3' [] [] _ = []
zip3' (x:xs) (y:ys) (z:zs) = [(x,y,z)] ++ zip3' xs ys zs
--___________________________________
sum' [] = 0
sum' [a] = a
sum' (x:xs) = x + sum' xs
--___________________________________
product' [] = 1
product' (x:xs) = x * product' xs
--___________________________________
words' "" = []
words' (x:xs) = [(x:xs)]
--___________________________________
lines' "" = []
lines' (x:xs) = [(x:xs)]
--___________________________________
unlines' [""] = "\n"
unlines' [(x:xs)] = (x:xs) ++ "\n"
--___________________________________
unwords' [""] = ""
unwords' [(x:xs)] = (x:xs)
--___________________________________
--___________________________________
--replicate' 0 _ = []
--replicate' y (x:xs) =
--___________________________________
--maximum' (x:xs)
